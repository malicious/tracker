{#- ================================================================= #}

{%- macro task_edit_header(t) -%}
<div class="task-edit-task-only">
  <div>
    <label></label>
    <button class="clone" formaction="{{url_for("tasks-v2-rest.create_task")}}">clone task</button>
  </div>
  <div>
    <label>task_id</label>
    <a href="{{url_for("tasks-v2.do_edit_matching_task_ids", task_id=t.task_id)}}">
      <span>{{t.task_id}}</span>
    </a>
  </div>
  <div>
    <label>import_source</label>
    <input class="import-source" name="task-import_source" placeholder="None" value="{{
      t.import_source
    }}" readonly="readonly">
  </div>
  <div>
    <label>category</label>
    <input class="category" name="task-category" placeholder="None" value="{{
      t.category if t.category
    }}" oninput="highlightOnHeaderInput(event)">
  </div>
  <div>
    <label>desc</label>
    <textarea class="desc" name="task-desc" oninput="highlightOnHeaderInput(event)">{{t.desc}}</textarea>
  </div>
  <div>
    <label>desc_for_llm</label>
    <textarea class="desc-for-llm" name="task-desc_for_llm" placeholder="None" oninput="highlightOnHeaderInput(event)">{{
      t.desc_for_llm if t.desc_for_llm
    }}</textarea>
  </div>
  <div>
    <label>time_estimate</label>
    <input class="time_estimate" name="task-time_estimate" placeholder="None" value="{{t.time_estimate if t.time_estimate}}" oninput="highlightOnHeaderInput(event)">
  </div>
</div>

{%- endmacro -%}



{%- macro task_add_header() -%}
<div class="task-edit-task-only">
  <div>
    <label>import_source</label>
    <input class="import-source" name="task-import_source" placeholder="None" oninput="highlightOnHeaderInput(event)">
  </div>
  <div>
    <label>category</label>
    <input class="category" name="task-category" placeholder="None" oninput="highlightOnHeaderInput(event)">
  </div>
  <div class="not-saved">
    <label>desc</label>
    <textarea class="desc" name="task-desc" oninput="highlightOnHeaderInput(event)"></textarea>
  </div>
  <div>
    <label>desc_for_llm</label>
    <textarea class="desc-for-llm" name="task-desc_for_llm" placeholder="None" oninput="highlightOnHeaderInput(event)"></textarea>
  </div>
  <div>
    <label>time_estimate</label>
    <input class="time_estimate" name="task-time_estimate" placeholder="None" oninput="highlightOnHeaderInput(event)">
  </div>
</div>

{%- endmacro -%}



{#- ================================================================= #}

{%- macro linkage_header_row() %}
<div class="linkage-header-row">
  <label>time_scope_id / created_at</label>
  <label>time_elapsed</label>
  <label>resolution</label>
  <label>detailed_resolution</label>
  <div></div>
</div>
{%- endmacro -%}



{%- macro linkage_footer_row(button_name='ðŸ’¾ save task') %}
<div class="linkage-footer-row">
  <div>
    <button class="new" disabled>+</button>
  </div>
  <div></div>
  <div>
    <button class="done" disabled>mark done</button>
  </div>
  <div style="text-align: right;">
    <button>{{ button_name }}</button>
  </div>
</div><!-- .linkage-footer-row -->
{%- endmacro -%}



{%- macro linkage_row(tl, placeholder_str="placeholder=\"None\"") -%}
<div class="linkage-row">
  <div>
    <input
      name="tl-{{tl.time_scope_id}}-time_scope_id"
      oninput="highlightOnInput(event)"
      value="{{tl.time_scope_id}}">
    <input
      name="tl-{{tl.time_scope_id}}-created_at"
      oninput="highlightOnInput(event)"
      value="{{tl.created_at if tl.created_at}}">
  </div>
  <div>
    <input
      name="tl-{{tl.time_scope_id}}-time_elapsed"
      oninput="highlightOnInput(event)"
      {{ placeholder_str }}
      value="{{tl.time_elapsed if tl.time_elapsed}}">
  </div>
  <div>
    <input
      name="tl-{{tl.time_scope_id}}-resolution"
      oninput="highlightOnInput(event)"
      {{ placeholder_str }}
      value="{{tl.resolution | escape if tl.resolution}}">
  </div>
  <div>
    <textarea
      name="tl-{{tl.time_scope_id}}-detailed_resolution"
      oninput="highlightOnInput(event)"
      {{ placeholder_str }}
    >{{tl.detailed_resolution if tl.detailed_resolution}}</textarea>
  </div>
  <div>
    <button>å­˜</button> {# TODO: update the "formaction" field here, so it's linkage-only #}
    <button class="delete" disabled>x</button>
  </div>
</div><!-- .linkage-row -->
{% endmacro %}



{% macro linkage_row_new(
    row_id,
    time_scope_str,
    created_at_str,
    resolution_str,
    placeholder_str="placeholder=\"None\""
) %}
<div class="linkage-row not-saved">
  <div>
    <input name="tl-{{row_id}}-time_scope_id" value="{{time_scope_str}}" placeholder="[enable javascript]">
    <input name="tl-{{row_id}}-created_at"    value="{{created_at_str}}" placeholder="[enable javascript]">
  </div>
  <div>
    <input name="tl-{{row_id}}-time_elapsed" {{ placeholder_str }} oninput="highlightOnInput(event)">
  </div>
  <div>
    <input name="tl-{{row_id}}-resolution" value="{{resolution_str}}" {{ placeholder_str }} oninput="highlightOnInput(event)">
  </div>
  <div>
    <textarea name="tl-{{row_id}}-detailed_resolution" {{ placeholder_str }} oninput="highlightOnInput(event)"></textarea>
  </div>
  <div>
    <button>å­˜</button> {# TODO: update the "formaction" field here, so it's linkage-only #}
    <button class="delete" disabled>x</button>
  </div>
</div>
{% endmacro %}



{# ================================================================= #}

{% set task_edit_css %}
:root {
  --not-saved-bg-color: rgb(250, 250, 230);
}

{# TODO: ".task-edit" isn't actually defined in this file #}
.task-edit div {
  padding-top: 0.25em;
  padding-bottom: 0.25em;
  overflow-x: hidden;
}
.task-edit-task-only label {
  display: inline-block;
  text-align: right;
  min-width: 9em;
}
.task-edit-task-only .import-source {
  border: 0;
}
.task-edit-task-only textarea {
  vertical-align: top;
  line-height: 1.2;
  min-width: 50%;
  min-height: 5em;
}
.task-edit input, .task-edit textarea {
  background-color: var(--tab-selected-bg-color);
}
.task-edit input:hover, .task-edit textarea:hover {
  background-color: rgb(255, 255, 255);
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
@media (prefers-color-scheme: dark) {
  .task-edit input, .task-edit textarea {
    /* just make this off-white for now; needs a lot more themeing for black to work */
    background-color: #ddd;
  }
}

.linkage-block {
  border: 1px solid rgba(29,28,29,.13);
  border-radius: 6px;
  margin: 0.5em;

  /* TODO: this could be a responsive table, with multi-line rows */
  display: grid;
  grid-template-columns: min-content 7em min-content auto min-content;
}
.linkage-row, .linkage-header-row, .linkage-footer-row {
  display: contents;
  grid-column: 1 / 5;
}
.linkage-header-row label {
  font-size: 80%;
  padding: 0.5em;
  vertical-align: bottom;
  min-width: 100px;
}
.linkage-row textarea {
  width: calc(100% - 0.6em);
  min-height: 4em;
  padding: 0.3em;
  margin: 0;
  border: 0 solid black;
}
.linkage-row button {
  width: 100%;
}
input.not-saved, textarea.not-saved,
.not-saved div, .not-saved input, .not-saved textarea,
input.not-saved:hover, textarea.not-saved:hover {
  background-color: var(--not-saved-bg-color);
}
{% endset %}{# task_edit_css #}



{% set task_edit_js %}
// https://stackoverflow.com/a/39502645
function toTimeScopeId(d0) {
  // Clone the Date object, since we modify it for math reasons
  d = new Date(d0);

  var dayOfWeek = (d.getDay() + 6) % 7 + 1;

  d.setDate(d.getDate() - dayOfWeek + 3);
  var thursdayOfWeek = d.valueOf();

  d.setMonth(0, 1);
  if (d.getDay() !== 4) {
    d.setMonth(0, 1 + ((4 - d.getDay()) + 7) % 7);
  }
  var weekOfYear = 1 + Math.ceil((thursdayOfWeek - d) / 604800000);
  if (weekOfYear < 10) {
    // add leading "0" in the most manual way possible
    weekOfYear = `0${weekOfYear}`
  }

  return `${d.getFullYear()}-ww${weekOfYear}.${dayOfWeek}`
}

function constructBlankTLRow(tl_preceding, resolution_str) {
  {# https://stackoverflow.com/a/33146982/2631462 #}
  // generate a "unique" linkage ID based on stringified time
  generation_time = new Date();
  time_scope_str = toTimeScopeId(new Date(generation_time));
  created_at_str = generation_time.toISOString()
    .split('T').join(' ') // remove the ISO8601 'T'
    .split('Z')[0]; // and remove anything past the 'Z'

  // TODO: overriding with a Pacific Time shift, be less hard-coded
  time_scope_str = toTimeScopeId(new Date(
      generation_time.toLocaleString('en-US', {timeZone: "America/Los_Angeles"})));

  new_row_id = btoa(+new Date).slice(-10, -2);
  console.log(`new row ID: ${new_row_id}`);

  // add a new "template" row, right above `div.linkage-footer-row`
  new_row = document.createElement('template');
  new_row.innerHTML = `
{{ linkage_row_new('${new_row_id}', '${time_scope_str}', '${created_at_str}', '${resolution_str}') }}
`;

  // add delete listener
  new_row.content.querySelector('button.delete').addEventListener("click", deleteTLRow, false);
  new_row.content.querySelector('textarea').addEventListener("focus", textareaResizeY, false);
  new_row.content.querySelector('textarea').addEventListener("input", textareaResizeY, false);

  if (tl_preceding != null) {
    // mark "roll" resolution in previous row, if it's empty
    var resolution_preceding = tl_preceding.querySelector('input[name*="-resolution"]');
    if (resolution_preceding != null && !resolution_preceding.value) {
      resolution_preceding.classList.add("not-saved");
      resolution_preceding.value = `roll => ${time_scope_str}`;
      
      time_scope_preceding = tl_preceding.querySelector('input[name*="-time_scope_id"]');
      if (time_scope_preceding.value.substring(0,5) == time_scope_str.substring(0,5)) {
        // if first 5 characters (of a string like "2022-ww27.3") match, skip the year prefix
        resolution_preceding.value = `roll => ${time_scope_str.substring(5)}`;
      }

    } // if resolution_preceding is blank

    // TODO: This is assuming a lot about the DOM layout for this table
    var tl_block = tl_preceding.parentNode;
    tl_block.insertBefore(new_row.content, tl_preceding.nextElementSibling);
    refreshBlockDeleteButtons(tl_block);

  } // if tl_preceding exists

  return new_row;
}

function addTLRow(e) {
  e.preventDefault();
  console.log(`addTLRow: got button click on button ${e.target}`);

  var tl_footer_row = e.target.parentNode.parentNode;
  var tl_preceding = tl_footer_row.previousElementSibling;
  new_row = constructBlankTLRow(tl_preceding, '');
}

function markDoneOrAddRow(e) {
  e.preventDefault();
  console.log(`addDoneRow: got button click on button ${e.target}`);

  var tl_footer_row = e.target.parentNode.parentNode;
  var tl_preceding = tl_footer_row.previousElementSibling;

  // Check if current date is identical to the time_scope_id in `tl_preceding`,
  // and whether its `resolution` is empty.
  var resolution_preceding = tl_preceding.querySelector('input[name*="-resolution"]');
  if (resolution_preceding != null && !resolution_preceding.value) {
    var time_scope_preceding = tl_preceding.querySelector('input[name*="-time_scope_id"]');
    // TODO: assuming a Pacific Time shift, be less hard-coded
    var today_ts = toTimeScopeId(new Date(
      new Date().toLocaleString('en-US', {timeZone: "America/Los_Angeles"})));

    if (time_scope_preceding != null && time_scope_preceding.value == today_ts) {
      resolution_preceding.classList.add("not-saved");
      resolution_preceding.value = "done";
      return;
    } // if time_scope_preceding is today
  } // if resolution_preceding is blank

  new_row = constructBlankTLRow(tl_preceding, 'done');
}

function enableNewTLButtons() {
  // with javascript enabled, re-enable all the "new linkage" buttons
  const new_tl_buttons = document.querySelectorAll(".linkage-footer-row button.new");
  console.log(`re-enabling ${new_tl_buttons.length} "new linkage" buttons`);

  for (var i = 0, len = new_tl_buttons.length; i < len; i++) {
    new_tl_buttons[i].disabled = false;
    new_tl_buttons[i].addEventListener("click", addTLRow, false);
  }

  const mark_done_buttons = document.querySelectorAll(".linkage-footer-row button.done");
  console.log(`re-enabling ${mark_done_buttons.length} "mark done" buttons`);

  for (var i = 0, len = mark_done_buttons.length; i < len; i++) {
    mark_done_buttons[i].disabled = false;
    mark_done_buttons[i].addEventListener("click", markDoneOrAddRow, false);
  }
};

function deleteTLRow(e) {
  e.preventDefault();
  console.log(`deleteTLRow: got button click on button ${e.target}`);

  var tl_row = e.target.parentNode.parentNode;
  var tl_block = tl_row.parentNode;

  tl_row.remove();
  refreshBlockDeleteButtons(tl_block);
}

function refreshBlockDeleteButtons(b) {
    // Counts the number of rows in this block, and disables the button if there's exactly one.
    // Otherwise, re-enables the first button (assumes its listener is still in place).
    //
    row_count = b.querySelectorAll(".linkage-row").length;
    if (row_count == 1) {
      b.querySelector(".linkage-row button.delete").disabled = true;
    } else {
      const tl_buttons = b.querySelectorAll(".linkage-row button.delete");
      for (var i = 0, len = tl_buttons.length; i < len; i++) {
        tl_buttons[i].disabled = false;
      }
    }

}

function enableDeleteTLButtons() {
  const delete_tl_buttons = document.querySelectorAll(".linkage-row button.delete");
  console.log(`re-enabling ${delete_tl_buttons.length} "delete linkage" buttons`);

  for (var i = 0, len = delete_tl_buttons.length; i < len; i++) {
    delete_tl_buttons[i].disabled = false;
    delete_tl_buttons[i].addEventListener("click", deleteTLRow, false);
  }

  const all_tasks = document.querySelectorAll(".linkage-block");
  for (var i = 0, len = all_tasks.length; i < len; i++) {
    refreshBlockDeleteButtons(all_tasks[i])
  }
}

function highlightOnHeaderInput(e) {
  e.target.classList.add("not-saved");

  var task_only_block = e.target.parentNode.parentNode;
  var task_block = task_only_block.parentNode.parentNode;
  var desc_field = task_block.querySelector('.task-edit-task-only textarea');
  if (desc_field != null && desc_field.value) {
    document.title = desc_field.value;
  }
}

function highlightOnInput(e) {
  e.target.classList.add("not-saved");

  var tl_row = e.target.parentNode.parentNode;
  var task_block = tl_row.parentNode.parentNode.parentNode;
  var desc_field = task_block.querySelector('.task-edit-task-only textarea');

  var task_id = task_block.querySelector('.task-edit-task-only span');
  if (task_id != null && task_id.innerText) {
    title_str = `t#${task_id.innerText}`;
    if (desc_field != null && desc_field.value) {
      title_str = title_str + `: ${desc_field.value}`;
    }

    document.title = title_str
  }
}

function textareaResizeY(allow_shrink = false) {
  previous_height = this.style.height.replace(/px/, '');

  this.style.height = 0;
  this.style.height = `${this.scrollHeight}px`;

  if (allow_shrink) {
    console.log(`Checking shrinkability, ${this.scrollHeight} < ${previous_height}`);
    if (this.scrollHeight < previous_height)
      this.style.height = `${previous_height}px`;
  }
}

function enableTextareaAutoResize() {
  const textareas = document.querySelectorAll("textarea");
  for (let i = 0; i < textareas.length; i++) {
    textareas[i].addEventListener("focus", textareaResizeY, false);
    textareas[i].addEventListener("input", textareaResizeY, false);
  }
}

document.addEventListener("DOMContentLoaded", enableNewTLButtons);
document.addEventListener("DOMContentLoaded", enableDeleteTLButtons);
document.addEventListener("DOMContentLoaded", enableTextareaAutoResize);


{% endset %}{# task_edit_js #}



{# ================================================================= #}

{% macro edit_block(t, backlink) %}
<form action="{{url_for("tasks-v2-rest.edit_task", task_id=t.task_id)}}" method="post">
  <input type="hidden" name="backlink" value="{{backlink}}">
  {{- task_edit_header(t) | indent(2) }}
  <div class="linkage-block">
  {{- linkage_header_row() }}{# should be `| indent(4)`, but <textarea> #}
  {%- for tl in t.linkages %}
    {{ linkage_row(tl) }}{# should be `| indent(4)`, but <textarea> #}
  {%- endfor %}
    {{ linkage_footer_row() | indent(4) }}
  </div><!-- .linkage-block -->
</form>
{%- endmacro %}
